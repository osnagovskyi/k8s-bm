---

- name: create /opt/bin folder
  file:
    path: '/opt/bin'
    owner: core
    group: core
    mode: 0755
    state: directory

- name: check if kubectl is present
  stat:
    path: "/opt/bin/kubectl"
  register: kubectl

- name: check kubectl version
  shell: "kubectl version --short | awk -F': ' '/^Client Version:/{ print $2 }'"
  register: kubectl_version
  when: kubectl.stat.exists == True
  changed_when: false

- name: download kubectl
  get_url:
    url: "https://storage.googleapis.com/kubernetes-release/release/{{k8s_kubectl_version}}/bin/linux/amd64/kubectl"
    dest: "/opt/bin/kubectl"
    mode: 0755
    owner: core
    group: core
    force: yes
  when: kubectl.stat.exists == False or kubectl_version.stdout != k8s_kubectl_version

- name: configure your workstation kubectl with this lines
  debug:
    msg: "{{item}}"
  with_items:
    - "kubectl config set-cluster {{k8s_kubectl_cluster_name}} --server=https://{{k8s_master_host}} --certificate-authority={{k8s_ssl_api_server_path}}/{{k8s_ssl_ca_pem_key_name}}"
    - "kubectl config set-credentials default-admin --certificate-authority={{k8s_ssl_api_server_path}}/{{k8s_ssl_ca_pem_key_name}} --client-key={{k8s_ssl_admin_path}}/admin-key.pem --client-certificate={{k8s_ssl_admin_path}}/admin.pem"
    - "kubectl config set-context {{k8s_kubectl_cluster_name}} --cluster={{k8s_kubectl_cluster_name}} --user=default-admin"
    - "kubectl config use-context {{k8s_kubectl_cluster_name}}"
  delegate_to: localhost

- name: create kubectl configuration scrit
  local_action:
    module: template
    src: "{{k8s_template_dir}}/kubectl_cfg.j2"
    dest: "{{ playbook_dir}}/kubectl_cfg.sh"
    mode: 0755
  run_once: true
  become: no
  tags: kub_cfg

- name: get cluster node list
  shell: 'kubectl get nodes | grep -c Ready'
  register: kubectl_result
  ignore_errors: yes
  changed_when: false

- name: ensure Kubernetes nodes are present and ready
  assert:
    that:
      - "'0' not in kubectl_result.stdout"
